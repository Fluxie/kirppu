// Generated by CoffeeScript 1.7.1
(function() {
  var CheckoutMode, ClerkLoginMode, CounterMode, CounterValidationMode, ItemFindMode, ModeSwitcher, b64_to_utf8, contentAfterPrefixRe, createRow, utf8_to_b64,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utf8_to_b64 = function(str) {
    return window.btoa(encodeURIComponent(escape(str)));
  };

  b64_to_utf8 = function(str) {
    return unescape(decodeURIComponent(window.atob(str)));
  };

  ModeSwitcher = (function() {
    function ModeSwitcher(config) {
      this.cfg = config ? config : CheckoutConfig;
      this._currentMode = null;
    }

    ModeSwitcher.prototype.startDefault = function() {
      return this.switchTo(CounterValidationMode);
    };

    ModeSwitcher.prototype.switchTo = function(mode) {
      var newMode;
      if (this._currentMode != null) {
        this._currentMode.unbind();
        this._currentMode = null;
      }
      newMode = new mode(this.cfg);
      newMode.assignSwitcher(this);
      if (!newMode.onPreBind()) {
        return;
      }
      newMode.bind();
      this._currentMode = newMode;
    };

    ModeSwitcher.prototype.currentMode = function() {
      if (this._currentMode != null) {
        return this._currentMode.constructor.name;
      } else {
        return null;
      }
    };

    return ModeSwitcher;

  })();

  window.ModeSwitcher = ModeSwitcher;

  CheckoutMode = (function() {
    function CheckoutMode(config) {
      this.cfg = config ? config : CheckoutConfig;
      this.uiEnabled = {
        receipt: false
      };
      this.switcher = null;
    }

    CheckoutMode.prototype.assignSwitcher = function(switcher) {
      return this.switcher = switcher;
    };

    CheckoutMode.prototype.switchTo = function(mode) {
      if (this.switcher == null) {
        console.log("Would switch mode to " + mode);
        return;
      }
      return this.switcher.switchTo(mode);
    };

    CheckoutMode.prototype.title = function() {
      return "[unknown mode]";
    };

    CheckoutMode.prototype.subtitle = function() {
      return null;
    };

    CheckoutMode.prototype.onPreBind = function() {
      return true;
    };

    CheckoutMode.prototype.bind = function(form, input) {
      var subtitle;
      if (form == null) {
        form = this.cfg.uiRef.codeForm;
      }
      if (input == null) {
        input = this.cfg.uiRef.codeInput;
      }
      form.off("submit");
      form.submit((function(_this) {
        return function(event) {
          var ret, value;
          value = input.val();
          ret = _this.onFormSubmit(value);
          if (ret) {
            input.val("");
          } else {
            console.error("Input not accepted: '" + value + "', ret=" + ret + ", this=" + _this.constructor.name);
          }
          return event.preventDefault();
        };
      })(this));
      this.cfg.uiRef.stateText.text(this.title());
      subtitle = this.subtitle();
      if (subtitle != null) {
        this.cfg.uiRef.stateText.append(" ", $("<small>").text(subtitle));
      }
    };

    CheckoutMode.prototype.unbind = function() {};

    CheckoutMode.prototype.onFormSubmit = function(input) {
      return false;
    };

    return CheckoutMode;

  })();

  window.CheckoutMode = CheckoutMode;

  contentAfterPrefixRe = function(prefix) {
    return new RegExp("^" + escapeRegEx(prefix) + "(.+)$");
  };

  CounterValidationMode = (function(_super) {
    __extends(CounterValidationMode, _super);

    CounterValidationMode.COOKIE = "mCV";

    function CounterValidationMode(config) {
      CounterValidationMode.__super__.constructor.call(this, config);
      this._prefix = contentAfterPrefixRe(this.cfg.settings.counterPrefix);
    }

    CounterValidationMode.prototype.title = function() {
      return "Locked";
    };

    CounterValidationMode.prototype.subtitle = function() {
      return "Need to validate counter.";
    };

    CounterValidationMode.prototype.onPreBind = function() {
      var code, data;
      code = $.cookie(this.constructor.COOKIE);
      if (code != null) {
        data = JSON.parse(b64_to_utf8(code));
        this.onResultSuccess(data);
        return false;
      }
      return CounterValidationMode.__super__.onPreBind.call(this);
    };

    CounterValidationMode.prototype.onFormSubmit = function(input) {
      var code, parsed;
      parsed = this._prefix.exec(input);
      if (parsed == null) {
        return false;
      }
      code = parsed[1];
      return Api.validateCounter(code, this);
    };

    CounterValidationMode.prototype.onResultSuccess = function(data) {
      var code, name;
      code = data["counter"];
      name = data["name"];
      this.cfg.settings.counterCode = code;
      this.cfg.settings.counterName = name;
      console.log("Validated " + code + " as " + name + ".");
      $.cookie(this.constructor.COOKIE, utf8_to_b64(JSON.stringify({
        counter: code,
        name: name
      })));
      return this.switchTo(ClerkLoginMode);
    };

    CounterValidationMode.prototype.onResultError = function(jqXHR) {
      if (jqXHR.status === 419) {
        console.log("Invalid counter code supplied.");
        return;
      }
      return true;
    };

    CounterValidationMode.clearStore = function() {
      return $.removeCookie(this.COOKIE);
    };

    return CounterValidationMode;

  })(CheckoutMode);

  ClerkLoginMode = (function(_super) {
    __extends(ClerkLoginMode, _super);

    function ClerkLoginMode(config) {
      ClerkLoginMode.__super__.constructor.call(this, config);
      this._prefix = contentAfterPrefixRe(this.cfg.settings.clerkPrefix);
    }

    ClerkLoginMode.prototype.title = function() {
      return "Locked";
    };

    ClerkLoginMode.prototype.subtitle = function() {
      return "Login...";
    };

    ClerkLoginMode.prototype.onFormSubmit = function(input) {
      var code, counter, parsed;
      parsed = this._prefix.exec(input);
      if (parsed == null) {
        return false;
      }
      code = parsed[0];
      counter = this.cfg.settings.counterCode;
      return Api.clerkLogin(code, counter, this);
    };

    ClerkLoginMode.prototype.onResultSuccess = function(data) {
      var username;
      username = data["user"];
      this.cfg.settings.clerkName = username;
      console.log("Logged in as " + username + ".");
      return this.switchTo(CounterMode);
    };

    ClerkLoginMode.prototype.onResultError = function(jqXHR) {
      if (jqXHR.status === 419) {
        console.log("Login failed: " + jqXHR.responseJSON["message"]);
        return;
      }
      return true;
    };

    return ClerkLoginMode;

  })(CheckoutMode);

  ItemFindMode = (function(_super) {
    __extends(ItemFindMode, _super);

    function ItemFindMode(config) {
      ItemFindMode.__super__.constructor.call(this, config);
    }

    ItemFindMode.prototype.title = function() {
      return "Find";
    };

    ItemFindMode.prototype.subtitle = function() {
      return "" + this.cfg.settings.clerkName + " @ " + this.cfg.settings.counterName;
    };

    ItemFindMode.prototype.onFormSubmit = function(input) {
      return Api.findItem(input, this);
    };

    ItemFindMode.prototype.onResultSuccess = function(data) {
      var row;
      row = createRow("?", data.code, data.name, data.price);
      return this.cfg.uiRef.receiptResult.append(row);
    };

    ItemFindMode.prototype.onResultError = function(jqXHR) {
      if (jqXHR.status === 404) {
        alert("No such item");
        return;
      }
      return true;
    };

    return ItemFindMode;

  })(CheckoutMode);

  createRow = function(index, code, name, price) {
    var row;
    row = $("<tr>");
    row.append($("<td>").text(index), $("<td>").text(code), $("<td>").text(name), $("<td>").text(price != null ? price.formatCents() : ""));
    return row;
  };

  CounterMode = (function(_super) {
    __extends(CounterMode, _super);

    function CounterMode(config) {
      CounterMode.__super__.constructor.call(this, config);
      this._p_remove = contentAfterPrefixRe(this.cfg.settings.removeItemPrefix);
      this._p_pay = contentAfterPrefixRe(this.cfg.settings.payPrefix);
      this._receipt = null;
    }

    CounterMode.prototype.title = function() {
      return "Checkout";
    };

    CounterMode.prototype.subtitle = function() {
      return "" + this.cfg.settings.clerkName + " @ " + this.cfg.settings.counterName;
    };

    CounterMode.prototype.onFormSubmit = function(input) {
      if (input.trim() === "") {
        return true;
      }
      if (this.tryPattern(this._p_remove, input, this.onRemoveItem)) {
        return true;
      }
      if (this.tryPattern(this._p_pay, input, this.onPayReceipt)) {
        return true;
      }
      if (this._receipt == null) {
        this._receipt = {
          rowCount: 0,
          total: 0,
          data: null
        };
        Api.startReceipt({
          onResultSuccess: (function(_this) {
            return function(data) {
              _this._receipt.data = data;
              return _this.onFormSubmit(input);
            };
          })(this),
          onResultError: (function(_this) {
            return function(jqHXR) {
              alert("Could not start receipt!");
              return true;
            };
          })(this)
        });
        return true;
      }
      Api.reserveItem(input, {
        onResultSuccess: (function(_this) {
          return function(data) {
            var row;
            _this._receipt.rowCount++;
            row = createRow(_this._receipt.rowCount, data.code, data.name, data.price);
            return _this.cfg.uiRef.receiptResult.append(row);
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Could not find item: " + input);
            return true;
          };
        })(this)
      });
      return true;
    };

    CounterMode.prototype.tryPattern = function(pattern, input, fn) {
      var value;
      value = pattern.exec(input);
      if (value != null) {
        fn.call(this, input);
        return true;
      }
      return false;
    };

    CounterMode.prototype.onRemoveItem = function(input) {
      var row;
      if (this._receipt == null) {
        return;
      }
      row = createRow(-this._receipt.rowCount, input, "??", "-00.00");
      return this.cfg.uiRef.receiptResult.append(row);
    };

    CounterMode.prototype.onPayReceipt = function(input) {
      if (this._receipt == null) {
        return;
      }
      return Api.finishReceipt({
        onResultSuccess: (function(_this) {
          return function(data) {
            _this._receipt.data = data;
            console.log(_this._receipt);
            _this.cfg.uiRef.receiptResult.empty();
            return _this._receipt = null;
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Error ending receipt!");
            return true;
          };
        })(this)
      });
    };

    return CounterMode;

  })(CheckoutMode);

  window.CounterValidationMode = CounterValidationMode;

  window.ClerkLoginMode = ClerkLoginMode;

  window.ItemFindMode = ItemFindMode;

}).call(this);
