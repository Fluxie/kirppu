// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  this.CounterMode = (function(_super) {
    __extends(CounterMode, _super);

    function CounterMode() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      CounterMode.__super__.constructor.apply(this, args);
      this._remove_prefix = this.cfg.settings.removeItemPrefix;
      this._pay_prefix = this.cfg.settings.payPrefix;
      this._receipt = null;
    }

    CounterMode.prototype.title = function() {
      return "Checkout";
    };

    CounterMode.prototype.subtitle = function() {
      return "" + this.cfg.settings.clerkName + " @ " + this.cfg.settings.counterName;
    };

    CounterMode.prototype.initialMenuEnabled = true;

    CounterMode.prototype.addRow = function(code, item, price, rounded) {
      var index, row;
      if (rounded == null) {
        rounded = false;
      }
      if (code != null) {
        this._receipt.rowCount++;
        index = this._receipt.rowCount;
        if ((price != null) && price < 0) {
          index = -index;
        }
      } else {
        code = "";
        index = "";
      }
      row = this.createRow(index, code, item, price, rounded);
      this.cfg.uiRef.receiptResult.prepend(row);
      return row;
    };

    CounterMode.prototype.onFormSubmit = function(input) {
      if (input.trim() === "") {
        return true;
      }
      if (input === this.cfg.settings.logoutPrefix) {
        this.onLogout();
        return true;
      }
      if (input.indexOf(this._remove_prefix) === 0) {
        this.onRemoveItem(input.slice(this._remove_prefix.length));
        return true;
      }
      if (input.indexOf(this._pay_prefix) === 0) {
        this.onPayReceipt(input.slice(this._pay_prefix.length));
        return true;
      }
      if (input === this.cfg.settings.abortPrefix) {
        this.onAbortReceipt();
        return true;
      }
      if (this._receipt == null) {
        this._receipt = {
          rowCount: 0,
          total: 0,
          data: null
        };
        this.switcher.setMenuEnabled(false);
        Api.startReceipt({
          onResultSuccess: (function(_this) {
            return function(data) {
              _this._receipt.data = data;
              _this.cfg.uiRef.receiptResult.empty();
              return _this.onFormSubmit(input);
            };
          })(this),
          onResultError: (function(_this) {
            return function(jqHXR) {
              alert("Could not start receipt!");
              return true;
            };
          })(this)
        });
        return true;
      }
      Api.reserveItem(input, {
        onResultSuccess: (function(_this) {
          return function(data) {
            _this.addRow(data.code, data.name, data.price);
            return _this._receipt.total += data.price;
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Could not find item: " + input);
            return true;
          };
        })(this)
      });
      return true;
    };

    CounterMode.prototype.onRemoveItem = function(input) {
      if (this._receipt == null) {
        return;
      }
      return Api.releaseItem(input, {
        onResultSuccess: (function(_this) {
          return function(data) {
            _this.addRow(data.code, data.name, -data.price);
            return _this._receipt.total -= data.price;
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Item not found on receipt: " + input);
            return true;
          };
        })(this)
      });
    };

    CounterMode.prototype.onPayReceipt = function(input) {
      var row, _i, _len, _ref;
      if (this._receipt == null) {
        return;
      }
      input = input - 0;
      if (input < this._receipt.total) {
        alert("Not enough given money!");
        return;
      }
      _ref = [this.addRow(null, "Subtotal", this._receipt.total, true), this.addRow(null, "Cash", input), this.addRow(null, "Return", input - this._receipt.total, true)];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        row.addClass("success");
      }
      return Api.finishReceipt({
        onResultSuccess: (function(_this) {
          return function(data) {
            _this._receipt.data = data;
            console.log(_this._receipt);
            _this._receipt = null;
            return _this.switcher.setMenuEnabled(true);
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Error ending receipt!");
            return true;
          };
        })(this)
      });
    };

    CounterMode.prototype.onAbortReceipt = function() {
      if (this._receipt == null) {
        return;
      }
      this.addRow(null, "Aborted", null).addClass("danger");
      return Api.abortReceipt({
        onResultSuccess: (function(_this) {
          return function(data) {
            _this._receipt.data = data;
            console.log(_this._receipt);
            _this._receipt = null;
            return _this.switcher.setMenuEnabled(true);
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Error ending receipt!");
            return true;
          };
        })(this)
      });
    };

    CounterMode.prototype.onLogout = function() {
      if (this._receipt != null) {
        alert("Cannot logout while receipt is active!");
        return;
      }
      return Api.clerkLogout({
        onResultSuccess: (function(_this) {
          return function() {
            console.log("Logged out " + _this.cfg.settings.clerkName + ".");
            _this.cfg.settings.clerkName = null;
            return _this.switchTo(ClerkLoginMode);
          };
        })(this),
        onResultError: (function(_this) {
          return function() {
            alert("Logout failed!");
            return true;
          };
        })(this)
      });
    };

    return CounterMode;

  })(ItemCheckoutMode);

  this.ModeSwitcher.registerEntryPoint("customer_checkout", CounterMode);

}).call(this);
