// Generated by CoffeeScript 1.7.1
(function() {
  var tables,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  tables = [
    [
      'Compensable Items', {
        SO: 0
      }
    ], [
      'Returnable Items', {
        BR: 0,
        ST: 0
      }
    ], [
      'Other Items', {
        MI: 0,
        RE: 0,
        CO: 0,
        AD: 0
      }
    ]
  ];

  this.VendorReport = (function(_super) {
    __extends(VendorReport, _super);

    function VendorReport(cfg, switcher, vendor) {
      this.onReturn = __bind(this.onReturn, this);
      this.onCompensate = __bind(this.onCompensate, this);
      this.onGotItems = __bind(this.onGotItems, this);
      VendorReport.__super__.constructor.call(this, cfg, switcher);
      this.vendor = vendor;
    }

    VendorReport.prototype.title = function() {
      return "Item Report";
    };

    VendorReport.prototype.actions = function() {
      return [
        [
          "", (function(_this) {
            return function(query) {
              return _this.switcher.switchTo(VendorFindMode, query);
            };
          })(this)
        ]
      ];
    };

    VendorReport.prototype.enter = function() {
      var checkoutButton, compensateButton;
      VendorReport.__super__.enter.apply(this, arguments);
      this.cfg.uiRef.body.append(new VendorInfo(this.vendor).render());
      compensateButton = $('<input type="button">').addClass('btn btn-primary').attr('value', 'Compensate').click(this.onCompensate);
      checkoutButton = $('<input type="button">').addClass('btn btn-primary').attr('value', 'Return Items').click(this.onReturn);
      this.cfg.uiRef.body.append($('<form class="hidden-print">').append(compensateButton, checkoutButton));
      return Api.item_list({
        vendor: this.vendor.id
      }).done(this.onGotItems);
    };

    VendorReport.prototype.onGotItems = function(items) {
      var i, matchingItems, name, states, table, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = tables.length; _i < _len; _i++) {
        _ref = tables[_i], name = _ref[0], states = _ref[1];
        matchingItems = (function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
            i = items[_j];
            if (states[i.state] != null) {
              _results1.push(i);
            }
          }
          return _results1;
        })();
        if (matchingItems.length > 0) {
          table = new ItemReportTable(name);
          table.update(matchingItems);
          _results.push(this.cfg.uiRef.body.append(table.render()));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    VendorReport.prototype.onCompensate = function() {
      return this.switcher.switchTo(VendorCompensation, this.vendor);
    };

    VendorReport.prototype.onReturn = function() {
      return this.switcher.switchTo(VendorCheckoutMode, this.vendor);
    };

    return VendorReport;

  })(CheckoutMode);

}).call(this);
