// Generated by CoffeeScript 1.7.1
(function() {
  var b64_to_utf8, utf8_to_b64,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utf8_to_b64 = function(str) {
    return window.btoa(encodeURIComponent(escape(str)));
  };

  b64_to_utf8 = function(str) {
    return unescape(decodeURIComponent(window.atob(str)));
  };

  this.CounterValidationMode = (function(_super) {
    __extends(CounterValidationMode, _super);

    CounterValidationMode.COOKIE = "mCV";

    function CounterValidationMode(config) {
      CounterValidationMode.__super__.constructor.call(this, config);
      this._prefix = this.cfg.settings.counterPrefix;
    }

    CounterValidationMode.prototype.title = function() {
      return "Locked";
    };

    CounterValidationMode.prototype.subtitle = function() {
      return "Need to validate counter.";
    };

    CounterValidationMode.prototype.initialMenuEnabled = false;

    CounterValidationMode.prototype.onPreBind = function() {
      var code, data;
      code = $.cookie(this.constructor.COOKIE);
      if (code != null) {
        data = JSON.parse(b64_to_utf8(code));
        this.onResultSuccess(data);
        return false;
      }
      return CounterValidationMode.__super__.onPreBind.call(this);
    };

    CounterValidationMode.prototype.onFormSubmit = function(input) {
      var code;
      if (input.indexOf(this._prefix) !== 0) {
        return false;
      }
      code = input.slice(this._prefix.length);
      return Api.validateCounter(code, this);
    };

    CounterValidationMode.prototype.onResultSuccess = function(data) {
      var code, name;
      code = data["counter"];
      name = data["name"];
      this.cfg.settings.counterCode = code;
      this.cfg.settings.counterName = name;
      console.log("Validated " + code + " as " + name + ".");
      $.cookie(this.constructor.COOKIE, utf8_to_b64(JSON.stringify({
        counter: code,
        name: name
      })));
      return this.switchTo(ClerkLoginMode);
    };

    CounterValidationMode.prototype.onResultError = function(jqXHR) {
      if (jqXHR.status === 419) {
        console.log("Invalid counter code supplied.");
        return;
      }
      return true;
    };

    CounterValidationMode.clearStore = function() {
      return $.removeCookie(this.COOKIE);
    };

    return CounterValidationMode;

  })(CheckoutMode);

  this.ModeSwitcher.registerEntryPoint("counter_validation", CounterValidationMode);

}).call(this);
