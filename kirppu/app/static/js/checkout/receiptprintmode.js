// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.ReceiptPrintMode = (function(_super) {
    __extends(ReceiptPrintMode, _super);

    ModeSwitcher.registerEntryPoint("reports", ReceiptPrintMode);

    ReceiptPrintMode.strTotal = "Total";

    ReceiptPrintMode.strTitle = "Find receipt";

    ReceiptPrintMode.strSell = "%d, served by %c";

    function ReceiptPrintMode() {
      this.findReceipt = __bind(this.findReceipt, this);
      ReceiptPrintMode.__super__.constructor.apply(this, arguments);
      this.receipt = new PrintReceiptTable();
    }

    ReceiptPrintMode.prototype.enter = function() {
      ReceiptPrintMode.__super__.enter.apply(this, arguments);
      return this.cfg.uiRef.body.append(this.receipt.render());
    };

    ReceiptPrintMode.prototype.glyph = function() {
      return "list-alt";
    };

    ReceiptPrintMode.prototype.title = function() {
      return this.constructor.strTitle;
    };

    ReceiptPrintMode.prototype.subtitle = function() {
      return "";
    };

    ReceiptPrintMode.prototype.actions = function() {
      return [["", this.findReceipt]];
    };

    ReceiptPrintMode.prototype.findReceipt = function(code) {
      return Api.receipt_get({
        item: code
      }).then((function(_this) {
        return function(data) {
          return _this.renderReceipt(data);
        };
      })(this), (function(_this) {
        return function() {
          return alert("Item not found in receipt!");
        };
      })(this));
    };

    ReceiptPrintMode.prototype.renderReceipt = function(receiptData) {
      var item, replacer, row, sellFmt, sellStr, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.receipt.body.empty();
      _ref = receiptData.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.action !== "ADD") {
          continue;
        }
        row = PrintReceiptTable.createRow(item.vendor, item.code, item.name, item.price, false);
        this.receipt.body.append(row);
      }
      replacer = function(s) {
        switch (s[1]) {
          case 'd':
            return DateTimeFormatter.datetime(receiptData.sell_time);
          case 'c':
            return receiptData.clerk.print;
          default:
            return s[1];
        }
      };
      sellFmt = /%[dc%]/g;
      sellStr = this.constructor.strSell.replace(sellFmt, replacer);
      _ref1 = [this.constructor.middleLine, PrintReceiptTable.createRow("", "", this.constructor.strTotal, receiptData.total, true), PrintReceiptTable.joinedLine(sellStr)].concat(this.constructor.tailLines);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        row = _ref1[_j];
        _results.push(this.receipt.body.append(row));
      }
      return _results;
    };

    ReceiptPrintMode.middleLine = PrintReceiptTable.joinedLine();

    ReceiptPrintMode.tailLines = [PrintReceiptTable.joinedLine()];

    return ReceiptPrintMode;

  })(CheckoutMode);

}).call(this);
