// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  this.DateTimeFormatter = (function() {
    function DateTimeFormatter() {}

    DateTimeFormatter.timeZone = null;

    DateTimeFormatter.locales = null;

    DateTimeFormatter._createDateOptions = function() {
      return {
        timeZone: this.constructor.timeZone
      };
    };

    DateTimeFormatter._dateSupportsLocales = function(fn) {
      var e;
      try {
        new Date()[fn]("i");
      } catch (_error) {
        e = _error;
        if (e.name === "RangeError") {
          try {
            new Date()[fn](this.locales, {
              timeZone: this.timeZone
            });
          } catch (_error) {
            e = _error;
            if (e.name === "RangeError") {
              return 1;
            }
          }
          return 2;
        }
      }
      return 0;
    };

    DateTimeFormatter._buildSupport = function() {
      var arg, args, r, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      r = {};
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        r[arg] = this._dateSupportsLocales(arg);
      }
      return r;
    };

    DateTimeFormatter.init = function(locales, timeZone) {
      if (locales == null) {
        locales = void 0;
      }
      if (timeZone == null) {
        timeZone = void 0;
      }
      if ((locales != null) && (timeZone != null)) {
        this.locales = locales;
        this.timeZone = timeZone;
      }
      return this._dateSupport = this._buildSupport("toLocaleDateString", "toLocaleTimeString", "toLocaleString");
    };

    DateTimeFormatter._dateSupport = null;

    DateTimeFormatter._callDateLocale = function(dateStr, fn) {
      var dateObj, supported;
      dateObj = new Date(dateStr);
      supported = this._dateSupport[fn];
      if (supported === 2) {
        return dateObj[fn](this.locales, this._createDateOptions());
      } else if (supported === 1) {
        return dateObj[fn](this.locales);
      } else {
        return dateObj[fn]();
      }
    };

    DateTimeFormatter.date = function(value) {
      return this._callDateLocale(value, "toLocaleDateString");
    };

    DateTimeFormatter.time = function(value) {
      return this._callDateLocale(value, "toLocaleTimeString");
    };

    DateTimeFormatter.datetime = function(value) {
      return this._callDateLocale(value, "toLocaleString");
    };

    return DateTimeFormatter;

  })();

}).call(this);
