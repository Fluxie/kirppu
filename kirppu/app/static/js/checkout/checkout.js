// Generated by CoffeeScript 1.7.1
(function() {
  var Api, Config;

  Config = (function() {
    function Config() {}

    Config.prototype.urls = {
      apiValidateCounter: null,
      apiClerkLogin: null,
      apiClerkLogout: null,
      apiItemInfo: null,
      apiItemCheckIn: null,
      apiItemReserve: null,
      apiItemRelease: null,
      apiVendorFind: null,
      apiReceiptStart: null,
      apiReceiptFinish: null,
      apiReceiptAbort: null
    };

    Config.prototype.uiId = {
      stateText: null,
      subtitleText: null,
      codeInput: null,
      codeForm: null,
      receiptResult: null,
      receiptTable: null,
      modeMenu: null
    };

    Config.prototype.uiRef = {
      stateText: null,
      subtitleText: null,
      codeInput: null,
      codeForm: null,
      receiptResult: null,
      modeMenu: null
    };

    Config.prototype.settings = {
      itemPrefix: null,
      clerkPrefix: "::",
      counterPrefix: ":*",
      commandPrefix: ":=",
      removeItemPrefix: "-",
      payPrefix: "+",
      abortPrefix: "**--",
      logoutPrefix: "----",
      counterCode: null,
      clerkName: null
    };

    Config.prototype.check = function() {
      var element, errors, key, value, _ref;
      errors = false;
      _ref = this.uiId;
      for (key in _ref) {
        value = _ref[key];
        element = $("#" + value);
        if (!((element != null) && element.length === 1)) {
          console.error("Name " + value + " does not identify an element for " + key + ".");
          errors = true;
          continue;
        }
        this.uiRef[key] = element;
      }
      return errors;
    };

    return Config;

  })();

  window.CheckoutConfig = new Config();

  Api = (function() {
    function Api() {}

    Api.C = CheckoutConfig;

    Api._sel = function(fn) {
      if ((fn != null) && "onResultSuccess" in fn) {
        return function(data, textStatus, jqXHR) {
          return fn.onResultSuccess(data, textStatus, jqXHR);
        };
      }
      if (fn != null) {
        return fn;
      } else {
        return function(data) {
          return console.log(data);
        };
      }
    };

    Api._err = function(fn) {
      return function(jqXHR, textStatus, httpError) {
        if ((fn != null) && "onResultError" in fn) {
          if (!fn.onResultError(jqXHR, textStatus, httpError)) {
            return;
          }
        }
        console.log([jqXHR.status, jqXHR.responseJSON != null ? jqXHR.responseJSON : jqXHR.responseText, textStatus, httpError]);
      };
    };

    Api.validateCounter = function(code, onComplete) {
      return $.post(this.C.urls.apiValidateCounter, {
        code: code
      }, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.clerkLogin = function(code, counter, onComplete) {
      var args;
      args = {
        code: code,
        counter: counter
      };
      return $.post(this.C.urls.apiClerkLogin, args, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.clerkLogout = function(onComplete) {
      return $.post(this.C.urls.apiClerkLogout, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.findItem = function(code, onComplete) {
      return $.get(this.C.urls.apiItemInfo, {
        code: code
      }, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.checkInItem = function(itemCode, onComplete) {
      return $.post(this.C.urls.apiItemCheckIn, {
        code: itemCode
      }, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.findVendors = function(query, onComplete) {
      return $.get(this.C.urls.apiVendorFind, query, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.startReceipt = function(onComplete) {
      return $.post(this.C.urls.apiReceiptStart, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.reserveItem = function(itemCode, onComplete) {
      return $.post(this.C.urls.apiItemReserve, {
        code: itemCode
      }, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.releaseItem = function(itemCode, onComplete) {
      return $.post(this.C.urls.apiItemRelease, {
        code: itemCode
      }, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.finishReceipt = function(onComplete) {
      return $.post(this.C.urls.apiReceiptFinish, this._sel(onComplete)).error(this._err(onComplete));
    };

    Api.abortReceipt = function(onComplete) {
      return $.post(this.C.urls.apiReceiptAbort, this._sel(onComplete)).error(this._err(onComplete));
    };

    return Api;

  })();

  window.Api = Api;

  Number.FRACTION_LEN = 2;

  Number.FRACTION = Math.pow(10, Number.FRACTION_LEN);

  Number.prototype.formatCents = function() {
    var fraction, fraction_len, fraction_str, ignored, wholes, _i, _ref;
    wholes = Math.floor(Math.abs(this / Number.FRACTION));
    fraction = Math.abs(this % Number.FRACTION);
    fraction_str = "";
    fraction_len = ("" + fraction).length;
    for (ignored = _i = fraction_len, _ref = Number.FRACTION_LEN; fraction_len <= _ref ? _i < _ref : _i > _ref; ignored = fraction_len <= _ref ? ++_i : --_i) {
      fraction_str += "0";
    }
    fraction_str += fraction;
    if (this < 0) {
      wholes = "-" + wholes;
    }
    return wholes + "." + fraction_str;
  };

  String.prototype.parseCents = function() {
    var cents, fraction, fraction_exp, matcher, pat, wholes;
    pat = /^(-?)(\d*)(?:[,.](\d*))?$/;
    matcher = pat.exec(this);
    if (matcher == null) {
      return null;
    }
    if (matcher[1] == null) {
      matcher[1] = "";
    }
    if (matcher[2] == null) {
      matcher[2] = "0";
    }
    if (matcher[3] == null) {
      matcher[3] = "0";
    }
    wholes = matcher[2] - 0;
    fraction = matcher[3] - 0;
    fraction_exp = Math.pow(10, Number.FRACTION_LEN - matcher[3].length);
    fraction = Math.round(fraction * fraction_exp);
    cents = wholes * Number.FRACTION;
    if (matcher[1] !== "-") {
      cents += fraction;
    } else {
      cents = -cents - fraction;
    }
    return cents;
  };

}).call(this);
